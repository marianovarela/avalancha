package main.java.generator.util;

public class StringCases {

	public static String uno = 
	"print A\n "
			+ "print B\n"
			+ "print True\n"
			+ "print False\n"
            + 
"print Cons(Zero, Cons(Suc(Zero), Cons(Suc(Suc(Zero)), Nil)))";
	
	public static String dos = "fun uno\r\n"
			+ "  -> Suc(Zero)\r\n"
			+ "\r\n"
			+ "fun tres\r\n"
			+ "  -> Suc(Suc(uno()))\r\n"
			+ "\r\n"
			+ "print tres()";
	
	public static String tres = "\r\n"
			+ "fun neg\r\n"
			+ "  True  -> False\r\n"
			+ "  False -> True\r\n"
			+ "\r\n"
			+ "print neg(True)\r\n"
			+ "print neg(False)\r\n";
	
	public static String cuatro = "\r\n"
			+ "fun and_\r\n"
			+ "  True  , True  -> True\r\n"
			+ "  True  , False -> False\r\n"
			+ "  False , True  -> False\r\n"
			+ "  False , False -> False\r\n"
			+ "\r\n"
			+ "fun or_\r\n"
			+ "  True  , True  -> True\r\n"
			+ "  True  , False -> True\r\n"
			+ "  False , True  -> True\r\n"
			+ "  False , False -> False\r\n"
			+ "\r\n"
			+ "fun siguiente\r\n"
			+ "  Norte -> Este\r\n"
			+ "  Este  -> Sur\r\n"
			+ "  Sur   -> Oeste\r\n"
			+ "  Oeste -> Norte\r\n"
			+ "\r\n"
			+ "print and_(True, True)\r\n"
			+ "print and_(True, False)\r\n"
			+ "print and_(False, True)\r\n"
			+ "print and_(False, False)\r\n"
			+ "\r\n"
			+ "print or_(True, True)\r\n"
			+ "print or_(True, False)\r\n"
			+ "print or_(False, True)\r\n"
			+ "print or_(False, False)\r\n"
			+ "\r\n"
			+ "print Q(\r\n"
			+ "        siguiente(Norte),\r\n"
			+ "        siguiente(siguiente(Norte)),\r\n"
			+ "        siguiente(siguiente(siguiente(Norte))),\r\n"
			+ "        siguiente(siguiente(siguiente(siguiente(Norte))))\r\n"
			+ "      )\r\n"
			+ "\r\n"
			+ "";
	
	public static String cinco = ""
			+ "fun sucsuc\r\n"
			+ "  x -> Suc(Suc(x))\r\n"
			+ "\r\n"
			+ "fun if\r\n"
			+ "  True,  x, _ -> x\r\n"
			+ "  False, _, y -> y\r\n"
			+ "\r\n"
			+ "print sucsuc(sucsuc(Zero))\r\n"
			+ "print if(True, A, B)\r\n"
			+ "print if(False, A, B)\r\n"
			; 
	
	public static String seis =
			"\r\n"
			+ "fun sum\r\n"
			+ "  Zero   , y -> y\r\n"
			+ "  Suc(x) , y -> Suc(sum(x, y))\r\n"
			+ "\r\n"
			+ "fun mul\r\n"
			+ "  Zero   , _ -> Zero\r\n"
			+ "  Suc(x) , y -> sum(y, mul(x, y))\r\n"
			+ "\r\n"
			+ "print mul(\r\n"
			+ "  Suc(Suc(Suc(Zero))),\r\n"
			+ "  Suc(Suc(Suc(Suc(Zero))))\r\n"
			+ ")\r\n";
	
	public static String siete =
			"\r\n"
			+ "-- Números en unario\r\n"
			+ "\r\n"
			+ "fun add\r\n"
			+ "  Zero   , y -> y\r\n"
			+ "  Suc(x) , y -> Suc(add(x, y))\r\n"
			+ "\r\n"
			+ "fun mul\r\n"
			+ "  Zero   , _ -> Zero\r\n"
			+ "  Suc(x) , y -> add(y, mul(x, y))\r\n"
			+ "\r\n"
			+ "-- Números en binario\r\n"
			+ "--\r\n"
			+ "-- Un número en binario se representa como\r\n"
			+ "-- una secuencia de bits, empezando por el menos\r\n"
			+ "-- significativo, p.ej.\r\n"
			+ "--\r\n"
			+ "--   B0(B1(B1(B1(Z))))\r\n"
			+ "--\r\n"
			+ "-- representa a (1110)_2 es decir 14.\r\n"
			+ "\r\n"
			+ "fun incb\r\n"
			+ "  Z              -> B1(Z)\r\n"
			+ "  B0(x)          -> B1(x)\r\n"
			+ "  B1(x)          -> B0(incb(x))\r\n"
			+ "\r\n"
			+ "fun addb\r\n"
			+ "  Z     , y      -> y\r\n"
			+ "  x     , Z      -> x\r\n"
			+ "  B0(x) , B0(y)  -> B0(addb(x, y))\r\n"
			+ "  B0(x) , B1(y)  -> B1(addb(x, y))\r\n"
			+ "  B1(x) , B0(y)  -> B1(addb(x, y))\r\n"
			+ "  B1(x) , B1(y)  -> B0(incb(addb(x, y)))\r\n"
			+ "\r\n"
			+ "fun mulb\r\n"
			+ "  Z     , _      -> Z\r\n"
			+ "  B0(x) , y      -> B0(mulb(x, y))\r\n"
			+ "  B1(x) , y      -> addb(B0(mulb(x, y)), y)\r\n"
			+ "\r\n"
			+ "--\r\n"
			+ "\r\n"
			+ "fun mul2  x -> mul(Suc(Suc(Zero)), x)\r\n"
			+ "\r\n"
			+ "fun binary_to_unary\r\n"
			+ "  Z              -> Zero\r\n"
			+ "  B0(x)          -> mul2(binary_to_unary(x))\r\n"
			+ "  B1(x)          -> Suc(mul2(binary_to_unary(x)))\r\n"
			+ "\r\n"
			+ "print mul(Suc(Suc(Suc(Zero))), Suc(Suc(Suc(Suc(Zero)))))\r\n"
			+ "print binary_to_unary(mulb(B1(B1(Z)), B0(B0(B1(Z)))))\r\n"
			+ "\r\n"
			+ "";
	
	public static String ocho = 
			"fun foo\r\n"
			+ "  ? True\r\n"
			+ "  ! True\r\n"
			+ "  -> A\r\n"
			+ "\r\n"
			+ "print foo()\r\n"
			;
	
	public static String nueve =
			"fun foo\r\n"
			+ "  ? False\r\n"
			+ "  ! True\r\n"
			+ "  -> A\r\n"
			+ "\r\n"
			+ "print foo()\r\n"
			;
	
	public static String diez =
			"\r\n"
			+ "fun foo\r\n"
			+ "  ? True\r\n"
			+ "  ! False\r\n"
			+ "  -> A\r\n"
			+ "\r\n"
			+ "print foo()\r\n"
			;
	
	public static String once = 
			"\r\n"
			+ "fun add\r\n"
			+ "  Zero   , y -> y\r\n"
			+ "  Suc(x) , y -> Suc(add(x, y))\r\n"
			+ "\r\n"
			+ "fun mul2  x -> add(x, x)\r\n"
			+ "\r\n"
			+ "fun binary_to_unary\r\n"
			+ "  : x -> y\r\n"
			+ "  ? is_binary(x)\r\n"
			+ "  ! is_unary(y)\r\n"
			+ "  Z              -> Zero\r\n"
			+ "  B0(x)          -> mul2(binary_to_unary(x))\r\n"
			+ "  B1(x)          -> Suc(mul2(binary_to_unary(x)))\r\n"
			+ "\r\n"
			+ "fun is_binary\r\n"
			+ "  Z     -> True\r\n"
			+ "  B0(x) -> is_binary(x)\r\n"
			+ "  B1(x) -> is_binary(x)\r\n"
			+ "  _     -> False\r\n"
			+ "\r\n"
			+ "fun is_unary\r\n"
			+ "  Zero   -> True\r\n"
			+ "  Suc(x) -> is_unary(x)\r\n"
			+ "  _      -> False\r\n"
			+ "\r\n"
			+ "print binary_to_unary(B0(B0(B1(Z))))\r\n"
			+ "\r\n"
			+ "";
	
	public static String doce =
			"\r\n"
			+ "fun add\r\n"
			+ "  Zero   , y -> y\r\n"
			+ "  Suc(x) , y -> Suc(add(x, y))\r\n"
			+ "\r\n"
			+ "fun mul\r\n"
			+ "  Zero   , _ -> Zero\r\n"
			+ "  Suc(x) , y -> add(y, mul(x, y))\r\n"
			+ "\r\n"
			+ "fun incb\r\n"
			+ "  Z              -> B1(Z)\r\n"
			+ "  B0(x)          -> B1(x)\r\n"
			+ "  B1(x)          -> B0(incb(x))\r\n"
			+ "\r\n"
			+ "fun addb\r\n"
			+ "  : x , y -> z\r\n"
			+ "  ? is_binary(x) and is_binary(y)\r\n"
			+ "  ! is_binary(z) and\r\n"
			+ "    add(binary_to_unary(x), binary_to_unary(y)) == binary_to_unary(z)\r\n"
			+ "\r\n"
			+ "  Z     , y      -> y\r\n"
			+ "  x     , Z      -> x\r\n"
			+ "  B0(x) , B0(y)  -> B0(addb(x, y))\r\n"
			+ "  B0(x) , B1(y)  -> B1(addb(x, y))\r\n"
			+ "  B1(x) , B0(y)  -> B1(addb(x, y))\r\n"
			+ "  B1(x) , B1(y)  -> B0(incb(addb(x, y)))\r\n"
			+ "\r\n"
			+ "fun mulb\r\n"
			+ "  : x , y -> z\r\n"
			+ "  ? is_binary(x) and is_binary(y)\r\n"
			+ "  ! is_binary(z) and\r\n"
			+ "    mul(binary_to_unary(x), binary_to_unary(y)) == binary_to_unary(z)\r\n"
			+ "\r\n"
			+ "  Z     , _      -> Z\r\n"
			+ "  B0(x) , y      -> B0(mulb(x, y))\r\n"
			+ "  B1(x) , y      -> addb(B0(mulb(x, y)), y)\r\n"
			+ "\r\n"
			+ "fun mul2  x -> add(x, x)\r\n"
			+ "\r\n"
			+ "fun binary_to_unary\r\n"
			+ "  Z              -> Zero\r\n"
			+ "  B0(x)          -> mul2(binary_to_unary(x))\r\n"
			+ "  B1(x)          -> Suc(mul2(binary_to_unary(x)))\r\n"
			+ "\r\n"
			+ "fun is_binary\r\n"
			+ "  Z     -> True\r\n"
			+ "  B0(x) -> is_binary(x)\r\n"
			+ "  B1(x) -> is_binary(x)\r\n"
			+ "  _     -> False\r\n"
			+ "\r\n"
			+ "print mulb(B1(B1(Z)), B0(B0(B1(Z))))\r\n"
			+ "\r\n"
			+ "";
	
	public static String trece =
			"\r\n"
			+ "fun menor_o_igual\r\n"
			+ "  Zero   , _      -> True\r\n"
			+ "  _      , Zero   -> False\r\n"
			+ "  Suc(x) , Suc(y) -> menor_o_igual(x, y)\r\n"
			+ "\r\n"
			+ "fun and_\r\n"
			+ "  True  , x -> x\r\n"
			+ "  False , _ -> False\r\n"
			+ "\r\n"
			+ "fun ordenada\r\n"
			+ "  Nil                  -> True\r\n"
			+ "  Cons(_, Nil)         -> True\r\n"
			+ "  Cons(x, Cons(y, xs)) -> and_(\r\n"
			+ "                            menor_o_igual(x, y),\r\n"
			+ "                            ordenada(Cons(y, xs))\r\n"
			+ "                          )\r\n"
			+ "\r\n"
			+ "fun insertar\r\n"
			+ "  : x , xs -> ys\r\n"
			+ "  ? ordenada(xs)\r\n"
			+ "  ! ordenada(ys)\r\n"
			+ "\r\n"
			+ "  x , Nil         -> Cons(x, Nil)\r\n"
			+ "  x , Cons(y, ys) -> insertar_if(menor_o_igual(x, y), x, y, ys)\r\n"
			+ "                       \r\n"
			+ "fun insertar_if\r\n"
			+ "  True  , x , y , ys -> Cons(x, Cons(y, ys))\r\n"
			+ "  False , x , y , ys -> Cons(y, insertar(x, ys))\r\n"
			+ "\r\n"
			+ "fun ordenar\r\n"
			+ "  : _ -> res\r\n"
			+ "  ! ordenada(res)\r\n"
			+ "  Nil         -> Nil\r\n"
			+ "  Cons(x, xs) -> insertar(x, ordenar(xs))\r\n"
			+ "\r\n"
			+ "fun range\r\n"
			+ "  Zero   -> Cons(Zero, Nil)\r\n"
			+ "  Suc(x) -> Cons(Suc(x), range(x))\r\n"
			+ "\r\n"
			+ "print menor_o_igual(Suc(Suc(Suc(Zero))),\r\n"
			+ "                    Suc(Suc(Suc(Zero))))\r\n"
			+ "\r\n"
			+ "print ordenada(\r\n"
			+ "        Cons(Zero,\r\n"
			+ "          Cons(Suc(Zero),\r\n"
			+ "            Cons(Suc(Suc(Suc(Zero))),\r\n"
			+ "              Cons(Suc(Suc(Suc(Zero))),\r\n"
			+ "                Nil)))))\r\n"
			+ "\r\n"
			+ "print ordenada(\r\n"
			+ "        Cons(Zero,\r\n"
			+ "          Cons(Suc(Suc(Suc(Zero))),\r\n"
			+ "            Cons(Suc(Zero),\r\n"
			+ "              Cons(Suc(Suc(Suc(Zero))),\r\n"
			+ "                Nil)))))\r\n"
			+ "\r\n"
			+ "print range(Suc(Suc(Suc(Suc(Suc(Suc(Suc(Zero))))))))\r\n"
			+ "print ordenar(range(Suc(Suc(Suc(Suc(Suc(Suc(Suc(Zero)))))))))\r\n"
			+ "\r\n"
			+ "";
	
	
}
